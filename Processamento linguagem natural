{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled1.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyPm2B/XQVY4BFni08xKQ5gl",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/RodrigoCBS/python-data-science/blob/master/Untitled1.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dcYv88-18Kuz",
        "outputId": "e562e526-d37c-48f7-ff12-dfd2280aad3b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "source": [
        "!pip install app_store_scraper\n",
        "from app_store_scraper import AppStore\n",
        "import pandas as pd\n",
        "\n",
        "instagram = AppStore(country=\"br\", app_name=\"Instagram\")\n",
        "instagram.review(how_many=20000)\n",
        "dfinstagram = pd.DataFrame.from_dict(instagram.reviews)\n",
        "dfinstagram.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Collecting app_store_scraper\n",
            "  Downloading https://files.pythonhosted.org/packages/08/aa/934b6fc61145b7c416bf057d1ac263b2c783df09b035661930c9ba5a7641/app_store_scraper-0.3.4-py3-none-any.whl\n",
            "Requirement already satisfied: requests==2.23.0 in /usr/local/lib/python3.6/dist-packages (from app_store_scraper) (2.23.0)\n",
            "Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests==2.23.0->app_store_scraper) (1.24.3)\n",
            "Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests==2.23.0->app_store_scraper) (3.0.4)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests==2.23.0->app_store_scraper) (2020.6.20)\n",
            "Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests==2.23.0->app_store_scraper) (2.10)\n",
            "Installing collected packages: app-store-scraper\n",
            "Successfully installed app-store-scraper-0.3.4\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "2020-11-03 23:58:20,178 [INFO] Base - Searching for app id\n",
            "2020-11-03 23:58:22,052 [INFO] Base - Initialised: AppStore('br', 'instagram', 389801252)\n",
            "2020-11-03 23:58:22,052 [INFO] Base - Ready to fetch reviews from: https://apps.apple.com/br/app/instagram/id389801252\n",
            "2020-11-03 23:58:27,139 [INFO] Base - [id:389801252] Fetched 540 reviews (540 fetched in total)\n",
            "2020-11-03 23:58:32,567 [INFO] Base - [id:389801252] Fetched 1100 reviews (1100 fetched in total)\n",
            "2020-11-03 23:58:37,857 [INFO] Base - [id:389801252] Fetched 1640 reviews (1640 fetched in total)\n",
            "2020-11-03 23:58:43,246 [INFO] Base - [id:389801252] Fetched 2200 reviews (2200 fetched in total)\n",
            "2020-11-03 23:58:48,485 [INFO] Base - [id:389801252] Fetched 2740 reviews (2740 fetched in total)\n",
            "2020-11-03 23:58:53,714 [INFO] Base - [id:389801252] Fetched 3240 reviews (3240 fetched in total)\n",
            "2020-11-03 23:58:59,046 [INFO] Base - [id:389801252] Fetched 3760 reviews (3760 fetched in total)\n",
            "2020-11-03 23:59:04,265 [INFO] Base - [id:389801252] Fetched 4280 reviews (4280 fetched in total)\n",
            "2020-11-03 23:59:09,632 [INFO] Base - [id:389801252] Fetched 4820 reviews (4820 fetched in total)\n",
            "2020-11-03 23:59:14,854 [INFO] Base - [id:389801252] Fetched 5340 reviews (5340 fetched in total)\n",
            "2020-11-03 23:59:20,217 [INFO] Base - [id:389801252] Fetched 5860 reviews (5860 fetched in total)\n",
            "2020-11-03 23:59:25,608 [INFO] Base - [id:389801252] Fetched 6340 reviews (6340 fetched in total)\n",
            "2020-11-03 23:59:30,946 [INFO] Base - [id:389801252] Fetched 6840 reviews (6840 fetched in total)\n",
            "2020-11-03 23:59:36,157 [INFO] Base - [id:389801252] Fetched 7340 reviews (7340 fetched in total)\n",
            "2020-11-03 23:59:41,406 [INFO] Base - [id:389801252] Fetched 7840 reviews (7840 fetched in total)\n",
            "2020-11-03 23:59:46,742 [INFO] Base - [id:389801252] Fetched 8340 reviews (8340 fetched in total)\n",
            "2020-11-03 23:59:52,112 [INFO] Base - [id:389801252] Fetched 8840 reviews (8840 fetched in total)\n",
            "2020-11-03 23:59:57,495 [INFO] Base - [id:389801252] Fetched 9340 reviews (9340 fetched in total)\n",
            "2020-11-04 00:00:02,878 [INFO] Base - [id:389801252] Fetched 9840 reviews (9840 fetched in total)\n",
            "2020-11-04 00:00:08,167 [INFO] Base - [id:389801252] Fetched 10320 reviews (10320 fetched in total)\n",
            "2020-11-04 00:00:13,485 [INFO] Base - [id:389801252] Fetched 10800 reviews (10800 fetched in total)\n",
            "2020-11-04 00:00:18,779 [INFO] Base - [id:389801252] Fetched 11280 reviews (11280 fetched in total)\n",
            "2020-11-04 00:00:24,090 [INFO] Base - [id:389801252] Fetched 11760 reviews (11760 fetched in total)\n",
            "2020-11-04 00:00:29,483 [INFO] Base - [id:389801252] Fetched 12240 reviews (12240 fetched in total)\n",
            "2020-11-04 00:00:34,885 [INFO] Base - [id:389801252] Fetched 12720 reviews (12720 fetched in total)\n",
            "2020-11-04 00:00:40,323 [INFO] Base - [id:389801252] Fetched 13200 reviews (13200 fetched in total)\n",
            "2020-11-04 00:00:45,777 [INFO] Base - [id:389801252] Fetched 13680 reviews (13680 fetched in total)\n",
            "2020-11-04 00:00:51,204 [INFO] Base - [id:389801252] Fetched 14160 reviews (14160 fetched in total)\n",
            "2020-11-04 00:00:56,506 [INFO] Base - [id:389801252] Fetched 14620 reviews (14620 fetched in total)\n",
            "2020-11-04 00:01:01,808 [INFO] Base - [id:389801252] Fetched 15060 reviews (15060 fetched in total)\n",
            "2020-11-04 00:01:07,056 [INFO] Base - [id:389801252] Fetched 15520 reviews (15520 fetched in total)\n",
            "2020-11-04 00:01:12,307 [INFO] Base - [id:389801252] Fetched 15980 reviews (15980 fetched in total)\n",
            "2020-11-04 00:01:17,763 [INFO] Base - [id:389801252] Fetched 16440 reviews (16440 fetched in total)\n",
            "2020-11-04 00:01:23,003 [INFO] Base - [id:389801252] Fetched 16900 reviews (16900 fetched in total)\n",
            "2020-11-04 00:01:28,379 [INFO] Base - [id:389801252] Fetched 17360 reviews (17360 fetched in total)\n",
            "2020-11-04 00:01:33,825 [INFO] Base - [id:389801252] Fetched 17820 reviews (17820 fetched in total)\n",
            "2020-11-04 00:01:39,078 [INFO] Base - [id:389801252] Fetched 18260 reviews (18260 fetched in total)\n",
            "2020-11-04 00:01:44,497 [INFO] Base - [id:389801252] Fetched 18720 reviews (18720 fetched in total)\n",
            "2020-11-04 00:01:49,927 [INFO] Base - [id:389801252] Fetched 19140 reviews (19140 fetched in total)\n",
            "2020-11-04 00:01:55,205 [INFO] Base - [id:389801252] Fetched 19580 reviews (19580 fetched in total)\n",
            "2020-11-04 00:02:00,302 [INFO] Base - [id:389801252] Fetched 20000 reviews (20000 fetched in total)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>title</th>\n",
              "      <th>userName</th>\n",
              "      <th>date</th>\n",
              "      <th>isEdited</th>\n",
              "      <th>rating</th>\n",
              "      <th>review</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Coisa chata</td>\n",
              "      <td>Mamá0809</td>\n",
              "      <td>2017-09-12 01:10:32</td>\n",
              "      <td>False</td>\n",
              "      <td>5</td>\n",
              "      <td>Tô cansada de baixar o aplicativo e depois des...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Não atualizem</td>\n",
              "      <td>Guimaka</td>\n",
              "      <td>2018-12-07 08:27:55</td>\n",
              "      <td>False</td>\n",
              "      <td>5</td>\n",
              "      <td>A nova atualização está horrível. Não consigo ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>tira isso</td>\n",
              "      <td>alicinhaghn</td>\n",
              "      <td>2019-02-06 05:30:15</td>\n",
              "      <td>False</td>\n",
              "      <td>2</td>\n",
              "      <td>não gostei que agora só posso ver qm viu o sto...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Péssimo</td>\n",
              "      <td>Jdmdjdjd</td>\n",
              "      <td>2017-09-11 23:22:45</td>\n",
              "      <td>False</td>\n",
              "      <td>1</td>\n",
              "      <td>App dando problema, fica fechando sozinho, tod...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Não é mais possível ver quem visualizou os Des...</td>\n",
              "      <td>Bbelizario</td>\n",
              "      <td>2019-02-07 15:06:01</td>\n",
              "      <td>False</td>\n",
              "      <td>1</td>\n",
              "      <td>Não gostei dessa atualização, pois retirou a p...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                               title  ...                                             review\n",
              "0                                        Coisa chata  ...  Tô cansada de baixar o aplicativo e depois des...\n",
              "1                                      Não atualizem  ...  A nova atualização está horrível. Não consigo ...\n",
              "2                                          tira isso  ...  não gostei que agora só posso ver qm viu o sto...\n",
              "3                                            Péssimo  ...  App dando problema, fica fechando sozinho, tod...\n",
              "4  Não é mais possível ver quem visualizou os Des...  ...  Não gostei dessa atualização, pois retirou a p...\n",
              "\n",
              "[5 rows x 6 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 1
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WtGH-lC48fVh"
      },
      "source": [
        "dfinstagram.drop(['isEdited','userName','date','title'],axis=1,inplace=True)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pihFSSM-jyx7",
        "outputId": "3d19a728-967a-4f90-f0b2-39b18eb8a4fe",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 350
        }
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "%matplotlib inline\n",
        "sns.set_style('whitegrid')\n",
        "sns.countplot('rating',data=dfinstagram)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  FutureWarning\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f5bd12c76d8>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 3
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "N0eaX5m0kACP",
        "outputId": "6a00063a-9c8b-4000-a0b2-48c77680bf1d",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "dfinstagram['rating'].value_counts()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1    7917\n",
              "5    5700\n",
              "3    2518\n",
              "2    2161\n",
              "4    1704\n",
              "Name: rating, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "p5127t6_BVco",
        "outputId": "3b537ec6-b627-4ef8-c6b5-59c0703c907e",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "len(dfinstagram['review'].unique())"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "19180"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ib-s4hTM_MY0",
        "outputId": "7150d51b-ffda-45df-8009-ca554ba44133",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "dfinstagram.drop_duplicates(['review'], inplace=True)\n",
        "dfinstagram['rating'].value_counts()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1    7871\n",
              "5    4971\n",
              "3    2504\n",
              "2    2156\n",
              "4    1678\n",
              "Name: rating, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kN8vUE8h2Uc0"
      },
      "source": [
        "from random import seed\n",
        "from random import sample\n",
        "# o seed será para que os resultados sejam iguais\n",
        "seed(42)\n",
        "\n",
        "def underSampling(dataframe, lowerRating):\n",
        "    df_equilibrado2 = pd.DataFrame()\n",
        "    for i in '15':\n",
        "        rating = [a for a in range(len(df_equilibrado[df_equilibrado['rating']==i]))]\n",
        "        subRating = sample(rating,lowerRating)\n",
        "        for j in subRating:\n",
        "            df_equilibrado2 = df_equilibrado2.append(df_equilibrado[df_equilibrado['rating']==i].iloc[j])\n",
        "    df_equilibrado.reset_index(drop=True)\n",
        "    return df_equilibrado2\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iRwXGKFB2UyT"
      },
      "source": [
        "\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xlyZuSq3Bu29",
        "outputId": "523f582c-4a4a-4191-f65d-8842c7a551a4",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "negativo = dfinstagram[dfinstagram.rating<3].copy()\n",
        "positivo = dfinstagram[dfinstagram.rating>3].copy()\n",
        "negativo['rating'] = 1\n",
        "positivo['rating'] = 5 \n",
        "\n",
        "df_equilibrado = pd.DataFrame()\n",
        "\n",
        "df_equilibrado = df_equilibrado.append(negativo)\n",
        "df_equilibrado = df_equilibrado.append(positivo)\n",
        "df_equilibrado.reset_index(drop=True)\n",
        "df_equilibrado['rating'].value_counts()\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "2020-11-04 00:03:01,891 [INFO] numexpr.utils - NumExpr defaulting to 2 threads.\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1    10027\n",
              "5     6649\n",
              "Name: rating, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PA1rdcVPDrOa",
        "outputId": "159ef4b5-0439-428e-ae38-fb8477075624",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 402
        }
      },
      "source": [
        "df_equilibrado.reset_index(drop=True)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>rating</th>\n",
              "      <th>review</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>não gostei que agora só posso ver qm viu o sto...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>App dando problema, fica fechando sozinho, tod...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>Não gostei dessa atualização, pois retirou a p...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>Está fechando sozinho , não consigo ficar mais...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>Gostaria de uma solução pois no\\nMeu iPhone fa...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16671</th>\n",
              "      <td>5</td>\n",
              "      <td>Os meus filtros antigos sumiram mesmo estando ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16672</th>\n",
              "      <td>5</td>\n",
              "      <td>Só não sei botar o modo escuro</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16673</th>\n",
              "      <td>5</td>\n",
              "      <td>Muito fácil de usar, porém está acontecendo mu...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16674</th>\n",
              "      <td>5</td>\n",
              "      <td>O idioma do meu Instagram está inglês desde a ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16675</th>\n",
              "      <td>5</td>\n",
              "      <td>Muito\\nBacana</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>16676 rows × 2 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "       rating                                             review\n",
              "0           1  não gostei que agora só posso ver qm viu o sto...\n",
              "1           1  App dando problema, fica fechando sozinho, tod...\n",
              "2           1  Não gostei dessa atualização, pois retirou a p...\n",
              "3           1  Está fechando sozinho , não consigo ficar mais...\n",
              "4           1  Gostaria de uma solução pois no\\nMeu iPhone fa...\n",
              "...       ...                                                ...\n",
              "16671       5  Os meus filtros antigos sumiram mesmo estando ...\n",
              "16672       5                     Só não sei botar o modo escuro\n",
              "16673       5  Muito fácil de usar, porém está acontecendo mu...\n",
              "16674       5  O idioma do meu Instagram está inglês desde a ...\n",
              "16675       5                                      Muito\\nBacana\n",
              "\n",
              "[16676 rows x 2 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dxxKZgPXkWf1",
        "outputId": "d89d563c-8af0-4cdf-fd0b-b6ff497fc08d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 303
        }
      },
      "source": [
        "df_equilibrado2 = underSampling(df_equilibrado,6649)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-15-6764119bff2a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf_equilibrado2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0munderSampling\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf_equilibrado\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m6649\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m<ipython-input-14-2a0586c3a0f1>\u001b[0m in \u001b[0;36munderSampling\u001b[0;34m(dataframe, lowerRating)\u001b[0m\n\u001b[1;32m      8\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m'15'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m         \u001b[0mrating\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0ma\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0ma\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf_equilibrado\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mdf_equilibrado\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'rating'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m==\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 10\u001b[0;31m         \u001b[0msubRating\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msample\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrating\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mlowerRating\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     11\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mj\u001b[0m \u001b[0;32min\u001b[0m \u001b[0msubRating\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m             \u001b[0mdf_equilibrado2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf_equilibrado2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf_equilibrado\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mdf_equilibrado\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'rating'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m==\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mj\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.6/random.py\u001b[0m in \u001b[0;36msample\u001b[0;34m(self, population, k)\u001b[0m\n\u001b[1;32m    318\u001b[0m         \u001b[0mn\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpopulation\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    319\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;36m0\u001b[0m \u001b[0;34m<=\u001b[0m \u001b[0mk\u001b[0m \u001b[0;34m<=\u001b[0m \u001b[0mn\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 320\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Sample larger than population or is negative\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    321\u001b[0m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    322\u001b[0m         \u001b[0msetsize\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m21\u001b[0m        \u001b[0;31m# size of a small set minus size of an empty list\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: Sample larger than population or is negative"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Qt64eSv72U8K",
        "outputId": "4f234eb4-3bfd-4843-8d3f-80b0c40ddefe",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "import string as st\n",
        "import nltk\n",
        "nltk.download('stopwords')\n",
        "from nltk.corpus import stopwords\n",
        "\n",
        "# lingua português - stopwords sao palavras de conecção\n",
        "stopwords.words('portuguese')[0:10]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Unzipping corpora/stopwords.zip.\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['de', 'a', 'o', 'que', 'e', 'é', 'do', 'da', 'em', 'um']"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "V-T4dZJm2Uni"
      },
      "source": [
        "def text_process(review):\n",
        "    \n",
        "    # converte para lower case\n",
        "    new_reviews = []\n",
        "    for word in review:\n",
        "        new_review = word.lower()\n",
        "        new_reviews.append(new_review)\n",
        "\n",
        "    # Retira pontuações\n",
        "    nopunc = [char for char in new_reviews if char not in st.punctuation]\n",
        "\n",
        "    # Junta-os para formar strings\n",
        "    nopunc = ''.join(nopunc)\n",
        "    \n",
        "    # Remove as stopwords\n",
        "    return [word for word in nopunc.split() if word not in stopwords.words('portuguese')]\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fSOkGZWCxII4",
        "outputId": "3731c1c3-3140-47b8-9e82-1f4b6cbedcd6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "from sklearn.feature_extraction.text import CountVectorizer\n",
        "\n",
        "#preparando o texto\n",
        "df_equilibrado['processed review'] = df_equilibrado['review'].apply(text_process)\n",
        "df_equilibrado['final review'] = [' '.join(map(str, l)) for l in df_equilibrado['processed review']]\n",
        "\n",
        "#dfinstagram['processed review'] = dfinstagram['review'].apply(text_process)\n",
        "#dfinstagram['final review'] = [' '.join(map(str, l)) for l in dfinstagram['processed review']]\n",
        "\n",
        "bow_transformer = CountVectorizer().fit(df_equilibrado['final review'])\n",
        "print(len(bow_transformer.vocabulary_))\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "13321\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QAfAER4YxNNC"
      },
      "source": [
        "reviews_bow = bow_transformer.transform(df_equilibrado['final review'])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hiEyg4Mq0WSH",
        "outputId": "66140916-c170-438f-e995-99971322fe62",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "print('forma da matriz esparsa: ', reviews_bow.shape)\n",
        "print('quantidade de não zeros: ', reviews_bow.nnz)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "forma da matriz esparsa:  (16676, 13321)\n",
            "quantidade de não zeros:  194311\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jiadMia_3z0_",
        "outputId": "2b5571a5-c158-4ea7-cfa6-a895e7d15414",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "esparcidade = (100* reviews_bow.nnz / (reviews_bow.shape[0] * reviews_bow.shape[1]))\n",
        "print('esparcidade: {} % '.format(esparcidade))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "esparcidade: 0.08747192256219109 % \n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bveM26gc5Atx"
      },
      "source": [
        "from sklearn.feature_extraction.text import TfidfTransformer\n",
        "\n",
        "tfidf_transformer = TfidfTransformer().fit(reviews_bow)\n",
        "reviews_tfidf = tfidf_transformer.transform(reviews_bow)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KXM5NQZG1FWr",
        "outputId": "c5db6d92-a60d-4a4d-e760-5199d166bbaf",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "print(reviews_tfidf.shape)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(16676, 13321)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LWVl3EqdLRmp"
      },
      "source": [
        "from sklearn.naive_bayes import MultinomialNB\n",
        "\n",
        "rating_detect_model = MultinomialNB().fit(reviews_tfidf, df_equilibrado['rating'])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "a2qrxUGqLZ6U"
      },
      "source": [
        "all_predictions = rating_detect_model.predict(reviews_tfidf)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SIuPyPgsGe5O"
      },
      "source": [
        "from sklearn.metrics import classification_report\n",
        "from sklearn.metrics import confusion_matrix"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bzwsvDg39h0g",
        "outputId": "1e291d14-6f87-4068-b94b-b2eb32715501",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "print(confusion_matrix(df_equilibrado['rating'], all_predictions))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[9826  201]\n",
            " [3477 3172]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1qETuC1rLZtP",
        "outputId": "c4b02c24-6574-4d7c-c510-a6088a7c1c89",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "print (classification_report(df_equilibrado['rating'], all_predictions))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           1       0.74      0.98      0.84     10027\n",
            "           5       0.94      0.48      0.63      6649\n",
            "\n",
            "    accuracy                           0.78     16676\n",
            "   macro avg       0.84      0.73      0.74     16676\n",
            "weighted avg       0.82      0.78      0.76     16676\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TmX-Qnc794Pp",
        "outputId": "5ae7a128-9e28-4242-dc7b-b440a0c9de55",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "review4500 = df_equilibrado['review'][4499]\n",
        "print(review4500)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "O meu ainda não aparece a opção do Reels 🥺🥺\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7E139PBn94jJ",
        "outputId": "80f5ea71-8113-4117-d008-f26ed3b87a29",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "bow9000 = bow_transformer.transform([review4500])\n",
        "print(bow9000)\n",
        "print(bow9000.shape)\n",
        "\n",
        "print(bow_transformer.get_feature_names()[2177])\n",
        "print(bow_transformer.get_feature_names()[4016])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "  (0, 816)\t1\n",
            "  (0, 1220)\t1\n",
            "  (0, 8022)\t1\n",
            "  (0, 8705)\t1\n",
            "  (0, 8918)\t1\n",
            "  (0, 10591)\t1\n",
            "(1, 13321)\n",
            "bugandoooo\n",
            "desinteresse\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Br-osve494GC",
        "outputId": "6e2c8421-0542-40c0-88c2-95e5675c5ea6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "tfidf9000 = tfidf_transformer.transform(bow9000)\n",
        "print(tfidf9000)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "  (0, 10591)\t0.31932877628112577\n",
            "  (0, 8918)\t0.2411913751670135\n",
            "  (0, 8705)\t0.5024156633114805\n",
            "  (0, 8022)\t0.6518443237967232\n",
            "  (0, 1220)\t0.2492937865165331\n",
            "  (0, 816)\t0.31683740306562663\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ypT9PbqQ-f8t",
        "outputId": "a5409b9a-bfa7-4743-8c15-cd4a7c6f8ee5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "print('predito:', rating_detect_model.predict(tfidf9000)[0])\n",
        "print('esperado:', df_equilibrado.rating[4499])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "predito: 1\n",
            "esperado: 1\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nna1SU_j-gbD"
      },
      "source": [
        "from sklearn.naive_bayes import GaussianNB\n",
        "avaliacoes = df_equilibrado['rating'].values\n",
        "dados_vetorizados = reviews_bow.toarray()\n",
        "rating_gnb = GaussianNB().fit(dados_vetorizados, avaliacoes)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gzirDLCQGioI"
      },
      "source": [
        "all_predictions_gnb = rating_gnb.predict(dados_vetorizados)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7eThxoN5GioO",
        "outputId": "c3bf4bcf-5bef-42f4-a031-ce6a0d1bc740",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 475
        }
      },
      "source": [
        "conf_mat = confusion_matrix(avaliacoes, all_predictions_gnb)\n",
        "cmap = sns.diverging_palette(120, 20, as_cmap = True)\n",
        "df_cm = pd.DataFrame(conf_mat, index = [i for i in \"15\"],\n",
        "                  columns = [i for i in \"15\"])\n",
        "plt.figure(figsize = (10,7))\n",
        "sns.heatmap(df_cm,cmap=cmap, \n",
        "            annot=True, \n",
        "            fmt='g',).set_title('Confusion Matrix para Modelo Naive-Bayes Gaussiano')\n",
        "plt.xlabel('Previsto')\n",
        "plt.ylabel('Esperado')\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(69.0, 0.5, 'Esperado')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 35
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 720x504 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Lh2cAlJ4G1wB",
        "outputId": "d1591309-1ffe-4016-bc67-272a19af213e",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "print (classification_report(avaliacoes, all_predictions_gnb))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           1       1.00      0.39      0.56     10027\n",
            "           5       0.52      1.00      0.69      6649\n",
            "\n",
            "    accuracy                           0.63     16676\n",
            "   macro avg       0.76      0.70      0.62     16676\n",
            "weighted avg       0.81      0.63      0.61     16676\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fXeUbb1cBfYd"
      },
      "source": [
        "#dfinstagram['processed review'] = dfinstagram['review'].apply(text_process)\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mAF6kNIrQZrj"
      },
      "source": [
        "#dfinstagram['final review'] = [' '.join(map(str, l)) for l in dfinstagram['processed review']]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vwiaPNplBfGF",
        "outputId": "f0a89373-c3b8-4a2b-e960-f7fe97664eaf",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(dados_vetorizados, avaliacoes, test_size=0.3, random_state=2)\n",
        "rating_model_multiNB = MultinomialNB().fit(X_train, y_train)\n",
        "all_predictions_MND= rating_model_multiNB.predict(X_test)\n",
        "print(classification_report(y_test, all_predictions_MND))\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           1       0.72      0.88      0.79      2963\n",
            "           5       0.74      0.50      0.60      2040\n",
            "\n",
            "    accuracy                           0.73      5003\n",
            "   macro avg       0.73      0.69      0.70      5003\n",
            "weighted avg       0.73      0.73      0.71      5003\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "96SYlNnfHH-R",
        "outputId": "6285e6f5-2c3b-439a-908c-0c9a2ac6e30a",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "rating_model_GNB = GaussianNB().fit(X_train, y_train)\n",
        "all_predictions_GNB = rating_model_GNB.predict(X_test)\n",
        "dicio = classification_report(y_test, all_predictions_GNB,output_dict=True)\n",
        "dicio.get('accuracy')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.4872499019223225"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 54
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1e9xBjKsJvSz"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9b4U1QZbJvS5"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2JIfHl2wJvS-",
        "outputId": "bf5908b3-0e16-49c9-c0f7-8f401ca94964",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "print(confusion_matrix(y_test, all_predictions_MND))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[2607  356]\n",
            " [1011 1029]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UBKaileKJvTB",
        "outputId": "7f6486f5-131f-42e7-b0f5-e89bee875307",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "from sklearn.naive_bayes import BernoulliNB\n",
        "\n",
        "clf = BernoulliNB()\n",
        "clf.fit(X_train, y_train)\n",
        "BernoulliNB()\n",
        "testespredict = clf.predict(X_test)\n",
        "print(classification_report(y_test, testespredict))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           1       0.74      0.77      0.76      2963\n",
            "           5       0.65      0.61      0.63      2040\n",
            "\n",
            "    accuracy                           0.71      5003\n",
            "   macro avg       0.70      0.69      0.69      5003\n",
            "weighted avg       0.70      0.71      0.71      5003\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TMcCwP2hPYkh",
        "outputId": "eabade8a-eddd-4f4c-b3ed-09bc74c41d2d",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "9274\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lFjeSUx0PYkq"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7oqVrMLIzLLH",
        "outputId": "483d9b64-b5e2-4328-ef0b-bd771c70b5b6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "bow = CountVectorizer(ngram_range=(2,2)).fit(df_equilibrado['final review'])\n",
        "reviewsBOW = bow.transform(df_equilibrado['final review'])\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "dados_vetorizados = reviewsBOW.toarray()\n",
        "\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(dados_vetorizados, avaliacoes, test_size=0.3, random_state=2)\n",
        "rating_model_multiNB = MultinomialNB().fit(X_train, y_train)\n",
        "all_predictions_MND= rating_model_multiNB.predict(X_test)\n",
        "print(classification_report(y_test, all_predictions_MND))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           1       0.71      0.65      0.68      1704\n",
            "           5       0.40      0.47      0.43       845\n",
            "\n",
            "    accuracy                           0.59      2549\n",
            "   macro avg       0.56      0.56      0.56      2549\n",
            "weighted avg       0.61      0.59      0.60      2549\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1uNzxb3RHH-X"
      },
      "source": [
        "clf = BernoulliNB()\n",
        "clf.fit(X_train, y_train)\n",
        "BernoulliNB()\n",
        "testespredict = clf.predict(X_test)\n",
        "print(classification_report(y_test, testespredict))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8aIU7H_kHRxc"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jQz0nshLQeQU",
        "outputId": "9d51a970-b24c-4ed5-fed0-f61722f288c3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "#Importando o Léxico de Palavras com polaridades\n",
        "sentilexpt = open(\"SentiLex-flex-PT02.txt\")\n",
        "\n",
        "#Criando um dicionário de palavras com a respectiva polaridade.\n",
        "dic_palavra_polaridade = {}\n",
        "for i in sentilexpt.readlines():\n",
        "  pos_virgula = i.find(',')\n",
        "  palavra = (i[:pos_virgula])\n",
        "  pol_pos = i.find('POL')\n",
        "  polaridade = (i[pol_pos+7:pol_pos+9]).replace(';', '')\n",
        "  dic_palavra_polaridade[palavra] = polaridade\n",
        "\n",
        "\n",
        "#Verificando o dicionário\n",
        "\n",
        "dic_palavra_polaridade\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'à-vontade': '1',\n",
              " 'abafada': '-1',\n",
              " 'abafadas': '-1',\n",
              " 'abafado': '-1',\n",
              " 'abafados': '-1',\n",
              " 'abafante': '-1',\n",
              " 'abafantes': '-1',\n",
              " 'abaixada': '-1',\n",
              " 'abaixadas': '-1',\n",
              " 'abaixado': '-1',\n",
              " 'abaixados': '-1',\n",
              " 'abalada': '-1',\n",
              " 'abaladas': '-1',\n",
              " 'abalado': '-1',\n",
              " 'abalados': '-1',\n",
              " 'abalizada': '1',\n",
              " 'abalizadas': '1',\n",
              " 'abalizado': '1',\n",
              " 'abalizados': '1',\n",
              " 'abalroa': '1',\n",
              " 'abalroá': '1',\n",
              " 'abalroada': '-1',\n",
              " 'abalroadas': '-1',\n",
              " 'abalroado': '1',\n",
              " 'abalroados': '-1',\n",
              " 'abalroai': '1',\n",
              " 'abalroais': '1',\n",
              " 'abalroam': '1',\n",
              " 'abalroámo': '1',\n",
              " 'abalroamo': '1',\n",
              " 'abalroámos': '1',\n",
              " 'abalroamos': '1',\n",
              " 'abalroando': '1',\n",
              " 'abalroar': '1',\n",
              " 'abalroará': '1',\n",
              " 'abalroara': '1',\n",
              " 'abalroaram': '1',\n",
              " 'abalroáramo': '1',\n",
              " 'abalroáramos': '1',\n",
              " 'abalroarão': '1',\n",
              " 'abalroarás': '1',\n",
              " 'abalroaras': '1',\n",
              " 'abalroarde': '1',\n",
              " 'abalroardes': '1',\n",
              " 'abalroare': '1',\n",
              " 'abalroarei': '1',\n",
              " 'abalroárei': '1',\n",
              " 'abalroareis': '1',\n",
              " 'abalroáreis': '1',\n",
              " 'abalroarem': '1',\n",
              " 'abalroaremos': '1',\n",
              " 'abalroares': '1',\n",
              " 'abalroaria': '1',\n",
              " 'abalroariam': '1',\n",
              " 'abalroaríamos': '1',\n",
              " 'abalroarias': '1',\n",
              " 'abalroaríeis': '1',\n",
              " 'abalroarmo': '1',\n",
              " 'abalroarmos': '1',\n",
              " 'abalroas': '1',\n",
              " 'abalroasse': '1',\n",
              " 'abalroásseis': '1',\n",
              " 'abalroassem': '1',\n",
              " 'abalroássemos': '1',\n",
              " 'abalroasses': '1',\n",
              " 'abalroaste': '1',\n",
              " 'abalroastes': '1',\n",
              " 'abalroava': '1',\n",
              " 'abalroavam': '1',\n",
              " 'abalroávamo': '1',\n",
              " 'abalroávamos': '1',\n",
              " 'abalroavas': '1',\n",
              " 'abalroávei': '1',\n",
              " 'abalroáveis': '1',\n",
              " 'abalroe': '1',\n",
              " 'abalroei': '1',\n",
              " 'abalroeis': '1',\n",
              " 'abalroem': '1',\n",
              " 'abalroemo': '1',\n",
              " 'abalroemos': '1',\n",
              " 'abalroes': '1',\n",
              " 'abalroo': '1',\n",
              " 'abalroou': '1',\n",
              " 'abana': '1',\n",
              " 'abaná': '1',\n",
              " 'abanado': '1',\n",
              " 'abanai': '1',\n",
              " 'abanais': '1',\n",
              " 'abanam': '1',\n",
              " 'abanámo': '1',\n",
              " 'abanamo': '1',\n",
              " 'abanámos': '1',\n",
              " 'abanamos': '1',\n",
              " 'abanando': '1',\n",
              " 'abanar': '1',\n",
              " 'abanará': '1',\n",
              " 'abanara': '1',\n",
              " 'abanaram': '1',\n",
              " 'abanáramo': '1',\n",
              " 'abanáramos': '1',\n",
              " 'abanarão': '1',\n",
              " 'abanarás': '1',\n",
              " 'abanaras': '1',\n",
              " 'abanarde': '1',\n",
              " 'abanardes': '1',\n",
              " 'abanare': '1',\n",
              " 'abanarei': '1',\n",
              " 'abanárei': '1',\n",
              " 'abanareis': '1',\n",
              " 'abanáreis': '1',\n",
              " 'abanarem': '1',\n",
              " 'abanaremos': '1',\n",
              " 'abanares': '1',\n",
              " 'abanaria': '1',\n",
              " 'abanariam': '1',\n",
              " 'abanaríamos': '1',\n",
              " 'abanarias': '1',\n",
              " 'abanaríeis': '1',\n",
              " 'abanarmo': '1',\n",
              " 'abanarmos': '1',\n",
              " 'abanas': '1',\n",
              " 'abanasse': '1',\n",
              " 'abanásseis': '1',\n",
              " 'abanassem': '1',\n",
              " 'abanássemos': '1',\n",
              " 'abanasses': '1',\n",
              " 'abanaste': '1',\n",
              " 'abanastes': '1',\n",
              " 'abanava': '1',\n",
              " 'abanavam': '1',\n",
              " 'abanávamo': '1',\n",
              " 'abanávamos': '1',\n",
              " 'abanavas': '1',\n",
              " 'abanávei': '1',\n",
              " 'abanáveis': '1',\n",
              " 'abandalhada': '-1',\n",
              " 'abandalhadas': '-1',\n",
              " 'abandalhado': '-1',\n",
              " 'abandalhados': '-1',\n",
              " 'abandalhamento': '-1',\n",
              " 'abandona': '-1',\n",
              " 'abandoná': '-1',\n",
              " 'abandonada': '-1',\n",
              " 'abandonadas': '-1',\n",
              " 'abandonado': '-1',\n",
              " 'abandonados': '-1',\n",
              " 'abandonai': '-1',\n",
              " 'abandonais': '-1',\n",
              " 'abandonam': '-1',\n",
              " 'abandonámo': '-1',\n",
              " 'abandonamo': '-1',\n",
              " 'abandonámos': '-1',\n",
              " 'abandonamos': '-1',\n",
              " 'abandonando': '-1',\n",
              " 'abandonar': '-1',\n",
              " 'abandonará': '-1',\n",
              " 'abandonara': '-1',\n",
              " 'abandonaram': '-1',\n",
              " 'abandonáramo': '-1',\n",
              " 'abandonáramos': '-1',\n",
              " 'abandonarão': '-1',\n",
              " 'abandonarás': '-1',\n",
              " 'abandonaras': '-1',\n",
              " 'abandonarde': '-1',\n",
              " 'abandonardes': '-1',\n",
              " 'abandonare': '-1',\n",
              " 'abandonarei': '-1',\n",
              " 'abandonárei': '-1',\n",
              " 'abandonareis': '-1',\n",
              " 'abandonáreis': '-1',\n",
              " 'abandonarem': '-1',\n",
              " 'abandonaremos': '-1',\n",
              " 'abandonares': '-1',\n",
              " 'abandonaria': '-1',\n",
              " 'abandonariam': '-1',\n",
              " 'abandonaríamos': '-1',\n",
              " 'abandonarias': '-1',\n",
              " 'abandonaríeis': '-1',\n",
              " 'abandonarmo': '-1',\n",
              " 'abandonarmos': '-1',\n",
              " 'abandonas': '-1',\n",
              " 'abandonasse': '-1',\n",
              " 'abandonásseis': '-1',\n",
              " 'abandonassem': '-1',\n",
              " 'abandonássemos': '-1',\n",
              " 'abandonasses': '-1',\n",
              " 'abandonaste': '-1',\n",
              " 'abandonastes': '-1',\n",
              " 'abandonava': '-1',\n",
              " 'abandonavam': '-1',\n",
              " 'abandonávamo': '-1',\n",
              " 'abandonávamos': '-1',\n",
              " 'abandonavas': '-1',\n",
              " 'abandonávei': '-1',\n",
              " 'abandonáveis': '-1',\n",
              " 'abandone': '-1',\n",
              " 'abandonei': '-1',\n",
              " 'abandoneis': '-1',\n",
              " 'abandonem': '-1',\n",
              " 'abandonemo': '-1',\n",
              " 'abandonemos': '-1',\n",
              " 'abandones': '-1',\n",
              " 'abandono': '-1',\n",
              " 'abandonou': '-1',\n",
              " 'abane': '1',\n",
              " 'abanei': '1',\n",
              " 'abaneis': '1',\n",
              " 'abanem': '1',\n",
              " 'abanemo': '1',\n",
              " 'abanemos': '1',\n",
              " 'abanes': '1',\n",
              " 'abano': '1',\n",
              " 'abanou': '1',\n",
              " 'abarcante': '0',\n",
              " 'abarcantes': '0',\n",
              " 'abarrotada': '-1',\n",
              " 'abarrotadas': '-1',\n",
              " 'abarrotado': '-1',\n",
              " 'abarrotados': '-1',\n",
              " 'abastada': '1',\n",
              " 'abastadas': '1',\n",
              " 'abastado': '1',\n",
              " 'abastados': '1',\n",
              " 'abastecida': '0',\n",
              " 'abastecidas': '0',\n",
              " 'abastecido': '0',\n",
              " 'abastecidos': '0',\n",
              " 'abata': '1',\n",
              " 'abatais': '1',\n",
              " 'abatam': '1',\n",
              " 'abatamo': '1',\n",
              " 'abatamos': '1',\n",
              " 'abatas': '1',\n",
              " 'abate': '1',\n",
              " 'abatê': '1',\n",
              " 'abatei': '1',\n",
              " 'abateis': '1',\n",
              " 'abatem': '1',\n",
              " 'abatemo': '1',\n",
              " 'abatemos': '1',\n",
              " 'abatendo': '1',\n",
              " 'abater': '1',\n",
              " 'abaterá': '1',\n",
              " 'abatera': '1',\n",
              " 'abateram': '1',\n",
              " 'abatêramo': '1',\n",
              " 'abatêramos': '1',\n",
              " 'abaterão': '1',\n",
              " 'abaterás': '1',\n",
              " 'abateras': '1',\n",
              " 'abaterde': '1',\n",
              " 'abaterdes': '1',\n",
              " 'abatere': '1',\n",
              " 'abaterei': '1',\n",
              " 'abatêrei': '1',\n",
              " 'abatereis': '1',\n",
              " 'abatêreis': '1',\n",
              " 'abaterem': '1',\n",
              " 'abateremos': '1',\n",
              " 'abateres': '1',\n",
              " 'abateria': '1',\n",
              " 'abateriam': '1',\n",
              " 'abateríamos': '1',\n",
              " 'abaterias': '1',\n",
              " 'abateríeis': '1',\n",
              " 'abatermo': '1',\n",
              " 'abatermos': '1',\n",
              " 'abates': '1',\n",
              " 'abatesse': '1',\n",
              " 'abatêsseis': '1',\n",
              " 'abatessem': '1',\n",
              " 'abatêssemos': '1',\n",
              " 'abatesses': '1',\n",
              " 'abateste': '1',\n",
              " 'abatestes': '1',\n",
              " 'abateu': '1',\n",
              " 'abati': '1',\n",
              " 'abatia': '1',\n",
              " 'abatiam': '1',\n",
              " 'abatíamo': '1',\n",
              " 'abatíamos': '1',\n",
              " 'abatias': '1',\n",
              " 'abatida': '-1',\n",
              " 'abatidas': '-1',\n",
              " 'abatido': '-1',\n",
              " 'abatidos': '-1',\n",
              " 'abatíei': '1',\n",
              " 'abatíeis': '1',\n",
              " 'abato': '1',\n",
              " 'abelhuda': '-1',\n",
              " 'abelhudas': '-1',\n",
              " 'abelhudo': '-1',\n",
              " 'abelhudos': '-1',\n",
              " 'abençoada': '1',\n",
              " 'abençoadas': '1',\n",
              " 'abençoado': '1',\n",
              " 'abençoados': '1',\n",
              " 'aberração': '-1',\n",
              " 'aberrante': '-1',\n",
              " 'aberrantes': '-1',\n",
              " 'aberrativa': '-1',\n",
              " 'aberrativas': '-1',\n",
              " 'aberrativo': '-1',\n",
              " 'aberrativos': '-1',\n",
              " 'aberta': '1',\n",
              " 'abertas': '1',\n",
              " 'aberto a alma': '1',\n",
              " 'aberto o coração': '1',\n",
              " 'aberto os olhos': '1',\n",
              " 'aberto': '1',\n",
              " 'abertos': '1',\n",
              " 'abespinhada': '-1',\n",
              " 'abespinhadas': '-1',\n",
              " 'abespinhado': '-1',\n",
              " 'abespinhados': '-1',\n",
              " 'abestalhada': '-1',\n",
              " 'abestalhadas': '-1',\n",
              " 'abestalhado': '-1',\n",
              " 'abestalhados': '-1',\n",
              " 'abilolada': '-1',\n",
              " 'abiloladas': '-1',\n",
              " 'abilolado': '-1',\n",
              " 'abilolados': '-1',\n",
              " 'abjeção': '-1',\n",
              " 'abjecção': '-1',\n",
              " 'abjecta': '-1',\n",
              " 'abjectas': '-1',\n",
              " 'abjecto': '-1',\n",
              " 'abjectos': '-1',\n",
              " 'abjeta': '-1',\n",
              " 'abjetas': '-1',\n",
              " 'abjeto': '-1',\n",
              " 'abjetos': '-1',\n",
              " 'abnegada': '1',\n",
              " 'abnegadas': '1',\n",
              " 'abnegado': '1',\n",
              " 'abnegados': '1',\n",
              " 'abobada': '-1',\n",
              " 'abobadas': '-1',\n",
              " 'abobado': '-1',\n",
              " 'abobados': '-1',\n",
              " 'abobalhada': '-1',\n",
              " 'abobalhadas': '-1',\n",
              " 'abobalhado': '-1',\n",
              " 'abobalhados': '-1',\n",
              " 'abolicionista': '0',\n",
              " 'abolicionistas': '0',\n",
              " 'abolida': '-1',\n",
              " 'abolidas': '-1',\n",
              " 'abolido': '-1',\n",
              " 'abolidos': '-1',\n",
              " 'abomina': '0',\n",
              " 'abominá': '0',\n",
              " 'abominado': '0',\n",
              " 'abominador': '-1',\n",
              " 'abominadora': '-1',\n",
              " 'abominadoras': '-1',\n",
              " 'abominadores': '-1',\n",
              " 'abominai': '0',\n",
              " 'abominais': '0',\n",
              " 'abominam': '0',\n",
              " 'abominámo': '0',\n",
              " 'abominamo': '0',\n",
              " 'abominámos': '0',\n",
              " 'abominamos': '0',\n",
              " 'abominanda': '-1',\n",
              " 'abominandas': '-1',\n",
              " 'abominando': '0',\n",
              " 'abominandos': '-1',\n",
              " 'abominar': '0',\n",
              " 'abominará': '0',\n",
              " 'abominara': '0',\n",
              " 'abominaram': '0',\n",
              " 'abomináramo': '0',\n",
              " 'abomináramos': '0',\n",
              " 'abominarão': '0',\n",
              " 'abominarás': '0',\n",
              " 'abominaras': '0',\n",
              " 'abominarde': '0',\n",
              " 'abominardes': '0',\n",
              " 'abominare': '0',\n",
              " 'abominarei': '0',\n",
              " 'abominárei': '0',\n",
              " 'abominareis': '0',\n",
              " 'abomináreis': '0',\n",
              " 'abominarem': '0',\n",
              " 'abominaremos': '0',\n",
              " 'abominares': '0',\n",
              " 'abominaria': '0',\n",
              " 'abominariam': '0',\n",
              " 'abominaríamos': '0',\n",
              " 'abominarias': '0',\n",
              " 'abominaríeis': '0',\n",
              " 'abominarmo': '0',\n",
              " 'abominarmos': '0',\n",
              " 'abominas': '0',\n",
              " 'abominasse': '0',\n",
              " 'abominásseis': '0',\n",
              " 'abominassem': '0',\n",
              " 'abominássemos': '0',\n",
              " 'abominasses': '0',\n",
              " 'abominaste': '0',\n",
              " 'abominastes': '0',\n",
              " 'abominava': '0',\n",
              " 'abominavam': '0',\n",
              " 'abominávamo': '0',\n",
              " 'abominávamos': '0',\n",
              " 'abominavas': '0',\n",
              " 'abominávei': '0',\n",
              " 'abomináveis': '-1',\n",
              " 'abominável': '-1',\n",
              " 'abomine': '0',\n",
              " 'abominei': '0',\n",
              " 'abomineis': '0',\n",
              " 'abominem': '0',\n",
              " 'abominemo': '0',\n",
              " 'abominemos': '0',\n",
              " 'abomines': '0',\n",
              " 'abomino': '0',\n",
              " 'abominou': '0',\n",
              " 'abonada': '1',\n",
              " 'abonadas': '1',\n",
              " 'abonado': '1',\n",
              " 'abonados': '1',\n",
              " 'abonatória': '1',\n",
              " 'abonatórias': '1',\n",
              " 'abonatório': '1',\n",
              " 'abonatórios': '1',\n",
              " 'abonecada': '0',\n",
              " 'abonecadas': '0',\n",
              " 'abonecado': '0',\n",
              " 'abonecados': '0',\n",
              " 'aborreça': '1',\n",
              " 'aborreçais': '1',\n",
              " 'aborreçam': '1',\n",
              " 'aborreçamo': '1',\n",
              " 'aborreçamos': '1',\n",
              " 'aborreças': '1',\n",
              " 'aborrecê': '1',\n",
              " 'aborrece': '1',\n",
              " 'aborrecei': '1',\n",
              " 'aborreceis': '1',\n",
              " 'aborrecem': '1',\n",
              " 'aborrecemo': '1',\n",
              " 'aborrecemos': '1',\n",
              " 'aborrecendo': '1',\n",
              " 'aborrecer': '1',\n",
              " 'aborrecerá': '1',\n",
              " 'aborrecera': '1',\n",
              " 'aborreceram': '1',\n",
              " 'aborrecêramo': '1',\n",
              " 'aborrecêramos': '1',\n",
              " 'aborrecerão': '1',\n",
              " 'aborrecerás': '1',\n",
              " 'aborreceras': '1',\n",
              " 'aborrecerde': '1',\n",
              " 'aborrecerdes': '1',\n",
              " 'aborrecere': '1',\n",
              " 'aborrecerei': '1',\n",
              " 'aborrecêrei': '1',\n",
              " 'aborrecereis': '1',\n",
              " 'aborrecêreis': '1',\n",
              " 'aborrecerem': '1',\n",
              " 'aborreceremos': '1',\n",
              " 'aborreceres': '1',\n",
              " 'aborreceria': '1',\n",
              " 'aborreceriam': '1',\n",
              " 'aborreceríamos': '1',\n",
              " 'aborrecerias': '1',\n",
              " 'aborreceríeis': '1',\n",
              " 'aborrecermo': '1',\n",
              " 'aborrecermos': '1',\n",
              " 'aborreces': '1',\n",
              " 'aborrecesse': '1',\n",
              " 'aborrecêsseis': '1',\n",
              " 'aborrecessem': '1',\n",
              " 'aborrecêssemos': '1',\n",
              " 'aborrecesses': '1',\n",
              " 'aborreceste': '1',\n",
              " 'aborrecestes': '1',\n",
              " 'aborreceu': '1',\n",
              " 'aborreci': '1',\n",
              " 'aborrecia': '1',\n",
              " 'aborreciam': '1',\n",
              " 'aborrecíamo': '1',\n",
              " 'aborrecíamos': '1',\n",
              " 'aborrecias': '1',\n",
              " 'aborrecida': '-1',\n",
              " 'aborrecidas': '-1',\n",
              " 'aborrecido': '-1',\n",
              " 'aborrecidos': '-1',\n",
              " 'aborrecíei': '1',\n",
              " 'aborrecíeis': '1',\n",
              " 'aborreço': '1',\n",
              " 'abortada': '-1',\n",
              " 'abortadas': '-1',\n",
              " 'abortado': '-1',\n",
              " 'abortados': '-1',\n",
              " 'abra a alma': '1',\n",
              " 'abra o coração': '1',\n",
              " 'abra os olhos': '1',\n",
              " 'abraçada': '1',\n",
              " 'abraçadas': '1',\n",
              " 'abraçado': '1',\n",
              " 'abraçados': '1',\n",
              " 'abrais a alma': '1',\n",
              " 'abrais o coração': '1',\n",
              " 'abrais os olhos': '1',\n",
              " 'abram a alma': '1',\n",
              " 'abram o coração': '1',\n",
              " 'abram os olhos': '1',\n",
              " 'abramos a alma': '1',\n",
              " 'abramos o coração': '1',\n",
              " 'abramos os olhos': '1',\n",
              " 'abras a alma': '1',\n",
              " 'abras o coração': '1',\n",
              " 'abras os olhos': '1',\n",
              " 'abrasileirada': '0',\n",
              " 'abrasileiradas': '0',\n",
              " 'abrasileirado': '0',\n",
              " 'abrasileirados': '0',\n",
              " 'abre a alma': '1',\n",
              " 'abre o coração': '1',\n",
              " 'abre os olhos': '1',\n",
              " 'abrem a alma': '1',\n",
              " 'abrem o coração': '1',\n",
              " 'abrem os olhos': '1',\n",
              " 'abres a alma': '1',\n",
              " 'abres o coração': '1',\n",
              " 'abres os olhos': '1',\n",
              " 'abri a alma': '1',\n",
              " 'abri o coração': '1',\n",
              " 'abri os olhos': '1',\n",
              " 'abria a alma': '1',\n",
              " 'abria o coração': '1',\n",
              " 'abria os olhos': '1',\n",
              " 'abriam a alma': '1',\n",
              " 'abriam o coração': '1',\n",
              " 'abriam os olhos': '1',\n",
              " 'abríamos a alma': '1',\n",
              " 'abríamos o coração': '1',\n",
              " 'abríamos os olhos': '1',\n",
              " 'abrias a alma': '1',\n",
              " 'abrias o coração': '1',\n",
              " 'abrias os olhos': '1',\n",
              " 'abríeis a alma': '1',\n",
              " 'abríeis o coração': '1',\n",
              " 'abríeis os olhos': '1',\n",
              " 'abrigada': '0',\n",
              " 'abrigadas': '0',\n",
              " 'abrigado': '0',\n",
              " 'abrigados': '0',\n",
              " 'abrilhantada': '1',\n",
              " 'abrilhantadas': '1',\n",
              " 'abrilhantado': '1',\n",
              " 'abrilhantados': '1',\n",
              " 'abrimos a alma': '1',\n",
              " 'abrimos o coração': '1',\n",
              " 'abrimos os olhos': '1',\n",
              " 'abrindo a alma': '1',\n",
              " 'abrindo o coração': '1',\n",
              " 'abrindo os olhos': '1',\n",
              " 'abrir a alma': '1',\n",
              " 'abrir o coração': '1',\n",
              " 'abrir os olhos': '1',\n",
              " 'abrirá a alma': '1',\n",
              " 'abrira a alma': '1',\n",
              " 'abrirá o coração': '1',\n",
              " 'abrira o coração': '1',\n",
              " 'abrirá os olhos': '1',\n",
              " 'abrira os olhos': '1',\n",
              " 'abriram a alma': '1',\n",
              " 'abriram o coração': '1',\n",
              " 'abriram os olhos': '1',\n",
              " 'abríramos a alma': '1',\n",
              " 'abríramos o coração': '1',\n",
              " 'abríramos os olhos': '1',\n",
              " 'abrirão a alma': '1',\n",
              " 'abrirão o coração': '1',\n",
              " 'abrirão os olhos': '1',\n",
              " 'abrirás a alma': '1',\n",
              " 'abriras a alma': '1',\n",
              " 'abrirás o coração': '1',\n",
              " 'abriras o coração': '1',\n",
              " 'abrirás os olhos': '1',\n",
              " 'abriras os olhos': '1',\n",
              " 'abrirdes a alma': '1',\n",
              " 'abrirdes o coração': '1',\n",
              " 'abrirdes os olhos': '1',\n",
              " 'abrirei a alma': '1',\n",
              " 'abrirei o coração': '1',\n",
              " 'abrirei os olhos': '1',\n",
              " 'abrireis a alma': '1',\n",
              " 'abríreis a alma': '1',\n",
              " 'abrireis o coração': '1',\n",
              " 'abríreis o coração': '1',\n",
              " 'abrireis os olhos': '1',\n",
              " 'abríreis os olhos': '1',\n",
              " 'abrirem a alma': '1',\n",
              " 'abrirem o coração': '1',\n",
              " 'abrirem os olhos': '1',\n",
              " 'abriremos a alma': '1',\n",
              " 'abriremos o coração': '1',\n",
              " 'abriremos os olhos': '1',\n",
              " 'abrires a alma': '1',\n",
              " 'abrires o coração': '1',\n",
              " 'abrires os olhos': '1',\n",
              " 'abriria a alma': '1',\n",
              " 'abriria o coração': '1',\n",
              " 'abriria os olhos': '1',\n",
              " 'abririam a alma': '1',\n",
              " 'abririam o coração': '1',\n",
              " 'abririam os olhos': '1',\n",
              " 'abriríamos a alma': '1',\n",
              " 'abriríamos o coração': '1',\n",
              " 'abriríamos os olhos': '1',\n",
              " 'abririas a alma': '1',\n",
              " 'abririas o coração': '1',\n",
              " 'abririas os olhos': '1',\n",
              " 'abriríeis a alma': '1',\n",
              " 'abriríeis o coração': '1',\n",
              " 'abriríeis os olhos': '1',\n",
              " 'abrirmos a alma': '1',\n",
              " 'abrirmos o coração': '1',\n",
              " 'abrirmos os olhos': '1',\n",
              " 'abris a alma': '1',\n",
              " 'abris o coração': '1',\n",
              " 'abris os olhos': '1',\n",
              " 'abrisse a alma': '1',\n",
              " 'abrisse o coração': '1',\n",
              " 'abrisse os olhos': '1',\n",
              " 'abrísseis a alma': '1',\n",
              " 'abrísseis o coração': '1',\n",
              " 'abrísseis os olhos': '1',\n",
              " 'abrissem a alma': '1',\n",
              " 'abrissem o coração': '1',\n",
              " 'abrissem os olhos': '1',\n",
              " 'abríssemos a alma': '1',\n",
              " 'abríssemos o coração': '1',\n",
              " 'abríssemos os olhos': '1',\n",
              " 'abrisses a alma': '1',\n",
              " 'abrisses o coração': '1',\n",
              " 'abrisses os olhos': '1',\n",
              " 'abriste a alma': '1',\n",
              " 'abriste o coração': '1',\n",
              " 'abriste os olhos': '1',\n",
              " 'abristes a alma': '1',\n",
              " 'abristes o coração': '1',\n",
              " 'abristes os olhos': '1',\n",
              " 'abriu a alma': '1',\n",
              " 'abriu o coração': '1',\n",
              " 'abriu os olhos': '1',\n",
              " 'abro a alma': '1',\n",
              " 'abro o coração': '1',\n",
              " 'abro os olhos': '1',\n",
              " 'abrupta': '-1',\n",
              " 'abruptas': '-1',\n",
              " 'abrupto': '-1',\n",
              " 'abruptos': '-1',\n",
              " 'abrutalhada': '-1',\n",
              " 'abrutalhadas': '-1',\n",
              " 'abrutalhado': '-1',\n",
              " 'abrutalhados': '-1',\n",
              " 'absentista': '-1',\n",
              " 'absentistas': '-1',\n",
              " 'absoluta': '0',\n",
              " 'absolutas': '0',\n",
              " 'absolutista': '0',\n",
              " 'absolutistas': '0',\n",
              " 'absoluto': '0',\n",
              " 'absolutos': '0',\n",
              " 'absolvida': '0',\n",
              " 'absolvidas': '0',\n",
              " 'absolvido': '0',\n",
              " 'absolvidos': '0',\n",
              " 'absorvente': '1',\n",
              " 'absorventes': '1',\n",
              " 'abstémia': '1',\n",
              " 'abstémias': '1',\n",
              " 'abstémica': '1',\n",
              " 'abstémicas': '1',\n",
              " 'abstémico': '1',\n",
              " 'abstémicos': '1',\n",
              " 'abstémio': '1',\n",
              " 'abstémios': '1',\n",
              " 'abstencionista': '0',\n",
              " 'abstencionistas': '0',\n",
              " 'abstinente': '0',\n",
              " 'abstinentes': '0',\n",
              " 'abstracta': '-1',\n",
              " 'abstractas': '-1',\n",
              " 'abstracto': '-1',\n",
              " 'abstractos': '-1',\n",
              " 'abstraída': '-1',\n",
              " 'abstraídas': '-1',\n",
              " 'abstraído': '-1',\n",
              " 'abstraídos': '-1',\n",
              " 'abstrata': '-1',\n",
              " 'abstratas': '-1',\n",
              " 'abstrato': '-1',\n",
              " 'abstratos': '-1',\n",
              " 'abstrusa': '-1',\n",
              " 'abstrusas': '-1',\n",
              " 'abstrusidade': '-1',\n",
              " 'abstruso': '-1',\n",
              " 'abstrusos': '-1',\n",
              " 'absurda': '-1',\n",
              " 'absurdas': '-1',\n",
              " 'absurdo': '-1',\n",
              " 'absurdos': '-1',\n",
              " 'abulia': '-1',\n",
              " 'abúlica': '-1',\n",
              " 'abúlicas': '-1',\n",
              " 'abúlico': '-1',\n",
              " 'abúlicos': '-1',\n",
              " 'aburguesada': '0',\n",
              " 'aburguesadas': '0',\n",
              " 'aburguesado': '0',\n",
              " 'aburguesados': '0',\n",
              " 'abusa': '-1',\n",
              " 'abusá': '-1',\n",
              " 'abusada': '-1',\n",
              " 'abusadas': '-1',\n",
              " 'abusado': '-1',\n",
              " 'abusador': '-1',\n",
              " 'abusadora': '-1',\n",
              " 'abusadoras': '-1',\n",
              " 'abusadores': '-1',\n",
              " 'abusados': '-1',\n",
              " 'abusai': '-1',\n",
              " 'abusais': '-1',\n",
              " 'abusam': '-1',\n",
              " 'abusámo': '-1',\n",
              " 'abusamo': '-1',\n",
              " 'abusámos': '-1',\n",
              " 'abusamos': '-1',\n",
              " 'abusando': '-1',\n",
              " 'abusar': '-1',\n",
              " 'abusará': '-1',\n",
              " 'abusara': '-1',\n",
              " 'abusaram': '-1',\n",
              " 'abusáramo': '-1',\n",
              " 'abusáramos': '-1',\n",
              " 'abusarão': '-1',\n",
              " 'abusarás': '-1',\n",
              " 'abusaras': '-1',\n",
              " 'abusarde': '-1',\n",
              " 'abusardes': '-1',\n",
              " 'abusare': '-1',\n",
              " 'abusarei': '-1',\n",
              " 'abusárei': '-1',\n",
              " 'abusareis': '-1',\n",
              " 'abusáreis': '-1',\n",
              " 'abusarem': '-1',\n",
              " 'abusaremos': '-1',\n",
              " 'abusares': '-1',\n",
              " 'abusaria': '-1',\n",
              " 'abusariam': '-1',\n",
              " 'abusaríamos': '-1',\n",
              " 'abusarias': '-1',\n",
              " 'abusaríeis': '-1',\n",
              " 'abusarmo': '-1',\n",
              " 'abusarmos': '-1',\n",
              " 'abusas': '-1',\n",
              " 'abusasse': '-1',\n",
              " 'abusásseis': '-1',\n",
              " 'abusassem': '-1',\n",
              " 'abusássemos': '-1',\n",
              " 'abusasses': '-1',\n",
              " 'abusaste': '-1',\n",
              " 'abusastes': '-1',\n",
              " 'abusava': '-1',\n",
              " 'abusavam': '-1',\n",
              " 'abusávamo': '-1',\n",
              " 'abusávamos': '-1',\n",
              " 'abusavas': '-1',\n",
              " 'abusávei': '-1',\n",
              " 'abusáveis': '-1',\n",
              " 'abuse': '-1',\n",
              " 'abusei': '-1',\n",
              " 'abuseis': '-1',\n",
              " 'abusem': '-1',\n",
              " 'abusemo': '-1',\n",
              " 'abusemos': '-1',\n",
              " 'abuses': '-1',\n",
              " 'abusiva': '-1',\n",
              " 'abusivas': '-1',\n",
              " 'abusivo': '-1',\n",
              " 'abusivos': '-1',\n",
              " 'abuso': '-1',\n",
              " 'abusou': '-1',\n",
              " 'acabada': '-1',\n",
              " 'acabadas': '-1',\n",
              " 'acabado': '-1',\n",
              " 'acabados': '-1',\n",
              " 'acabadota': '-1',\n",
              " 'acabadotas': '-1',\n",
              " 'acabadote': '-1',\n",
              " 'acabadotes': '-1',\n",
              " 'acabrunhada': '-1',\n",
              " 'acabrunhadas': '-1',\n",
              " 'acabrunhado': '-1',\n",
              " 'acabrunhados': '-1',\n",
              " 'acaciana': '-1',\n",
              " 'acacianas': '-1',\n",
              " 'acaciano': '-1',\n",
              " 'acacianos': '-1',\n",
              " 'acadêmica': '0',\n",
              " 'acadêmicas': '0',\n",
              " 'acadêmico': '0',\n",
              " 'acadêmicos': '0',\n",
              " 'acalorada': '0',\n",
              " 'acaloradas': '0',\n",
              " 'acalorado': '0',\n",
              " 'acalorados': '0',\n",
              " 'açambarcador': '-1',\n",
              " 'açambarcadora': '-1',\n",
              " 'açambarcadoras': '-1',\n",
              " 'açambarcadores': '-1',\n",
              " 'acanha': '-1',\n",
              " 'acanhá': '-1',\n",
              " 'acanhada': '-1',\n",
              " 'acanhadas': '-1',\n",
              " 'acanhado': '-1',\n",
              " 'acanhados': '-1',\n",
              " 'acanhai': '-1',\n",
              " 'acanhais': '-1',\n",
              " 'acanham': '-1',\n",
              " 'acanhamento': '-1',\n",
              " 'acanhámo': '-1',\n",
              " 'acanhamo': '-1',\n",
              " 'acanhámos': '-1',\n",
              " 'acanhamos': '-1',\n",
              " 'acanhando': '-1',\n",
              " 'acanhar': '-1',\n",
              " 'acanhará': '-1',\n",
              " 'acanhara': '-1',\n",
              " 'acanharam': '-1',\n",
              " 'acanháramo': '-1',\n",
              " 'acanháramos': '-1',\n",
              " 'acanharão': '-1',\n",
              " 'acanharás': '-1',\n",
              " 'acanharas': '-1',\n",
              " 'acanharde': '-1',\n",
              " 'acanhardes': '-1',\n",
              " 'acanhare': '-1',\n",
              " 'acanharei': '-1',\n",
              " 'acanhárei': '-1',\n",
              " 'acanhareis': '-1',\n",
              " 'acanháreis': '-1',\n",
              " 'acanharem': '-1',\n",
              " 'acanharemos': '-1',\n",
              " 'acanhares': '-1',\n",
              " 'acanharia': '-1',\n",
              " 'acanhariam': '-1',\n",
              " 'acanharíamos': '-1',\n",
              " 'acanharias': '-1',\n",
              " 'acanharíeis': '-1',\n",
              " 'acanharmo': '-1',\n",
              " 'acanharmos': '-1',\n",
              " 'acanhas': '-1',\n",
              " 'acanhasse': '-1',\n",
              " 'acanhásseis': '-1',\n",
              " 'acanhassem': '-1',\n",
              " 'acanhássemos': '-1',\n",
              " 'acanhasses': '-1',\n",
              " 'acanhaste': '-1',\n",
              " 'acanhastes': '-1',\n",
              " 'acanhava': '-1',\n",
              " 'acanhavam': '-1',\n",
              " 'acanhávamo': '-1',\n",
              " 'acanhávamos': '-1',\n",
              " 'acanhavas': '-1',\n",
              " 'acanhávei': '-1',\n",
              " 'acanháveis': '-1',\n",
              " 'acanhe': '-1',\n",
              " 'acanhei': '-1',\n",
              " 'acanheis': '-1',\n",
              " 'acanhem': '-1',\n",
              " 'acanhemo': '-1',\n",
              " 'acanhemos': '-1',\n",
              " 'acanhes': '-1',\n",
              " 'acanho': '-1',\n",
              " 'acanhou': '-1',\n",
              " 'acatada': '1',\n",
              " 'acatadas': '1',\n",
              " 'acatado': '1',\n",
              " 'acatador': '0',\n",
              " 'acatadora': '0',\n",
              " 'acatadoras': '0',\n",
              " 'acatadores': '0',\n",
              " 'acatados': '1',\n",
              " 'acautelada': '0',\n",
              " 'acauteladas': '0',\n",
              " 'acautelado': '0',\n",
              " 'acautelados': '0',\n",
              " 'acéfala': '-1',\n",
              " 'acéfalas': '-1',\n",
              " 'acéfalo': '-1',\n",
              " 'acéfalos': '-1',\n",
              " 'aceita': '0',\n",
              " 'aceitas': '0',\n",
              " 'aceitáveis': '1',\n",
              " 'aceitável': '1',\n",
              " 'aceite': '0',\n",
              " 'aceites': '0',\n",
              " 'aceito': '0',\n",
              " 'aceitos': '0',\n",
              " 'acelerada': '0',\n",
              " 'aceleradas': '0',\n",
              " 'acelerado': '0',\n",
              " 'acelerados': '0',\n",
              " 'acentuada': '0',\n",
              " 'acentuadas': '0',\n",
              " 'acentuado': '0',\n",
              " 'acentuados': '0',\n",
              " 'acerada': '-1',\n",
              " 'aceradas': '-1',\n",
              " 'acerado': '-1',\n",
              " 'acerados': '-1',\n",
              " 'acerba': '-1',\n",
              " 'acerbas': '-1',\n",
              " 'acerbidade': '-1',\n",
              " 'acerbo': '-1',\n",
              " 'acerbos': '-1',\n",
              " 'acérrima': '-1',\n",
              " 'acérrimas': '-1',\n",
              " 'acérrimo': '-1',\n",
              " 'acérrimos': '-1',\n",
              " 'acerta na mosca': '1',\n",
              " 'acerta na mouche': '1',\n",
              " 'acertada': '1',\n",
              " 'acertadas': '1',\n",
              " 'acertado na mosca': '1',\n",
              " 'acertado na mouche': '1',\n",
              " 'acertado': '1',\n",
              " 'acertados': '1',\n",
              " 'acertai na mosca': '1',\n",
              " 'acertai na mouche': '1',\n",
              " 'acertais na mosca': '1',\n",
              " 'acertais na mouche': '1',\n",
              " 'acertam na mosca': '1',\n",
              " 'acertam na mouche': '1',\n",
              " 'acertámos na mosca': '1',\n",
              " 'acertamos na mosca': '1',\n",
              " 'acertámos na mouche': '1',\n",
              " 'acertamos na mouche': '1',\n",
              " 'acertando na mosca': '1',\n",
              " 'acertando na mouche': '1',\n",
              " 'acertar na mosca': '1',\n",
              " 'acertar na mouche': '1',\n",
              " 'acertará na mosca': '1',\n",
              " 'acertara na mosca': '1',\n",
              " 'acertará na mouche': '1',\n",
              " 'acertara na mouche': '1',\n",
              " 'acertaram na mosca': '1',\n",
              " 'acertaram na mouche': '1',\n",
              " 'acertáramos na mosca': '1',\n",
              " 'acertáramos na mouche': '1',\n",
              " 'acertarão na mosca': '1',\n",
              " 'acertarão na mouche': '1',\n",
              " 'acertarás na mosca': '1',\n",
              " 'acertaras na mosca': '1',\n",
              " 'acertarás na mouche': '1',\n",
              " 'acertaras na mouche': '1',\n",
              " 'acertardes na mosca': '1',\n",
              " 'acertardes na mouche': '1',\n",
              " 'acertarei na mosca': '1',\n",
              " 'acertarei na mouche': '1',\n",
              " 'acertareis na mosca': '1',\n",
              " 'acertáreis na mosca': '1',\n",
              " 'acertareis na mouche': '1',\n",
              " 'acertáreis na mouche': '1',\n",
              " 'acertarem na mosca': '1',\n",
              " 'acertarem na mouche': '1',\n",
              " 'acertaremos na mosca': '1',\n",
              " 'acertaremos na mouche': '1',\n",
              " 'acertares na mosca': '1',\n",
              " 'acertares na mouche': '1',\n",
              " 'acertaria na mosca': '1',\n",
              " 'acertaria na mouche': '1',\n",
              " 'acertariam na mosca': '1',\n",
              " 'acertariam na mouche': '1',\n",
              " 'acertaríamos na mosca': '1',\n",
              " 'acertaríamos na mouche': '1',\n",
              " 'acertarias na mosca': '1',\n",
              " 'acertarias na mouche': '1',\n",
              " 'acertaríeis na mosca': '1',\n",
              " 'acertaríeis na mouche': '1',\n",
              " 'acertarmos na mosca': '1',\n",
              " 'acertarmos na mouche': '1',\n",
              " 'acertas na mosca': '1',\n",
              " 'acertas na mouche': '1',\n",
              " 'acertasse na mosca': '1',\n",
              " 'acertasse na mouche': '1',\n",
              " 'acertásseis na mosca': '1',\n",
              " 'acertásseis na mouche': '1',\n",
              " 'acertassem na mosca': '1',\n",
              " 'acertassem na mouche': '1',\n",
              " 'acertássemos na mosca': '1',\n",
              " ...}"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "v3WFzVJzjOlM"
      },
      "source": [
        "#Criando uma função chamada \"Score de Sentimento\" para determinar os sentimentos associados\n",
        "def Score_sentimento(frase):\n",
        "    l_sentimento = []\n",
        "    for p in frase:\n",
        "        l_sentimento.append(int(dic_palavra_polaridade.get(p, 0)))\n",
        "    score = sum(l_sentimento)\n",
        "    return score"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9ShbWum_jVIi"
      },
      "source": [
        "df_equilibrado['feeling'] = df_equilibrado.apply(lambda row: Score_sentimento(row['processed review']), axis=1)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yIsqLnFmnJXx",
        "outputId": "94932e62-c2bd-4a38-b03e-6cd1635ccb26",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 639
        }
      },
      "source": [
        "df_equilibrado.groupby('feeling').count()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>rating</th>\n",
              "      <th>review</th>\n",
              "      <th>processed review</th>\n",
              "      <th>final review</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>feeling</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>-17</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>-10</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>-9</th>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>-8</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>-7</th>\n",
              "      <td>12</td>\n",
              "      <td>12</td>\n",
              "      <td>12</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>-6</th>\n",
              "      <td>28</td>\n",
              "      <td>28</td>\n",
              "      <td>28</td>\n",
              "      <td>28</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>-5</th>\n",
              "      <td>52</td>\n",
              "      <td>52</td>\n",
              "      <td>52</td>\n",
              "      <td>52</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>-4</th>\n",
              "      <td>154</td>\n",
              "      <td>154</td>\n",
              "      <td>154</td>\n",
              "      <td>154</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>-3</th>\n",
              "      <td>411</td>\n",
              "      <td>411</td>\n",
              "      <td>411</td>\n",
              "      <td>411</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>-2</th>\n",
              "      <td>1080</td>\n",
              "      <td>1080</td>\n",
              "      <td>1080</td>\n",
              "      <td>1080</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>-1</th>\n",
              "      <td>3478</td>\n",
              "      <td>3478</td>\n",
              "      <td>3478</td>\n",
              "      <td>3478</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>8417</td>\n",
              "      <td>8417</td>\n",
              "      <td>8417</td>\n",
              "      <td>8417</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2356</td>\n",
              "      <td>2356</td>\n",
              "      <td>2356</td>\n",
              "      <td>2356</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>540</td>\n",
              "      <td>540</td>\n",
              "      <td>540</td>\n",
              "      <td>540</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>111</td>\n",
              "      <td>111</td>\n",
              "      <td>111</td>\n",
              "      <td>111</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>21</td>\n",
              "      <td>21</td>\n",
              "      <td>21</td>\n",
              "      <td>21</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "         rating  review  processed review  final review\n",
              "feeling                                                \n",
              "-17           1       1                 1             1\n",
              "-10           1       1                 1             1\n",
              "-9            5       5                 5             5\n",
              "-8            1       1                 1             1\n",
              "-7           12      12                12            12\n",
              "-6           28      28                28            28\n",
              "-5           52      52                52            52\n",
              "-4          154     154               154           154\n",
              "-3          411     411               411           411\n",
              "-2         1080    1080              1080          1080\n",
              "-1         3478    3478              3478          3478\n",
              " 0         8417    8417              8417          8417\n",
              " 1         2356    2356              2356          2356\n",
              " 2          540     540               540           540\n",
              " 3          111     111               111           111\n",
              " 4           21      21                21            21\n",
              " 5            6       6                 6             6\n",
              " 6            1       1                 1             1\n",
              " 7            1       1                 1             1"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XEmj0RqznUb2",
        "outputId": "a6dcbf15-e2c1-49d3-ec0b-042830a160ce",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 511
        }
      },
      "source": [
        "sns.set_style('whitegrid')\n",
        "sns.jointplot('rating','feeling',data = df_equilibrado)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  FutureWarning\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.JointGrid at 0x7f5bc7fe8128>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 46
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x432 with 3 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FfcbGOq_pTTo",
        "outputId": "bab106a2-905f-4cd5-8d62-4d8796a4f805",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "source": [
        "df_equilibrado[df_equilibrado['feeling']==4]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>rating</th>\n",
              "      <th>review</th>\n",
              "      <th>processed review</th>\n",
              "      <th>final review</th>\n",
              "      <th>feeling</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1345</th>\n",
              "      <td>1</td>\n",
              "      <td>Olá, bom dia. \\nAntes de tudo resaltó que não ...</td>\n",
              "      <td>[olá, bom, dia, antes, tudo, resaltó, nenhum, ...</td>\n",
              "      <td>olá bom dia antes tudo resaltó nenhum famoso r...</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2664</th>\n",
              "      <td>1</td>\n",
              "      <td>Já entrei em contato com o suporte várias veze...</td>\n",
              "      <td>[entrei, contato, suporte, várias, vezes, busc...</td>\n",
              "      <td>entrei contato suporte várias vezes busca solu...</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3898</th>\n",
              "      <td>1</td>\n",
              "      <td>Meu instagram ainda não tem a opção de animar ...</td>\n",
              "      <td>[instagram, ainda, opção, animar, textos, amig...</td>\n",
              "      <td>instagram ainda opção animar textos amigos têm...</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4462</th>\n",
              "      <td>1</td>\n",
              "      <td>Eu não estou mais conseguindo salvar os boomer...</td>\n",
              "      <td>[conseguindo, salvar, boomerang, pois, fica, b...</td>\n",
              "      <td>conseguindo salvar boomerang pois fica bom tem...</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5414</th>\n",
              "      <td>1</td>\n",
              "      <td>Desde q o meu iPhone 8 Plus atualizou para o i...</td>\n",
              "      <td>[desde, q, iphone, 8, plus, atualizou, ios, 14...</td>\n",
              "      <td>desde q iphone 8 plus atualizou ios 14 consigo...</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8261</th>\n",
              "      <td>1</td>\n",
              "      <td>Porque não é confiável?\\nO Instagram não é con...</td>\n",
              "      <td>[porque, confiável, instagram, confiável, pois...</td>\n",
              "      <td>porque confiável instagram confiável pois esco...</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12226</th>\n",
              "      <td>1</td>\n",
              "      <td>QUERIDO INSTAGRAM, EU NÃO ESTOU RECEBENDO NENH...</td>\n",
              "      <td>[querido, instagram, recebendo, nenhuma, notif...</td>\n",
              "      <td>querido instagram recebendo nenhuma notificaçã...</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13873</th>\n",
              "      <td>1</td>\n",
              "      <td>Já está com 3 semanas que diminuiriam mais da ...</td>\n",
              "      <td>[3, semanas, diminuiriam, metade, visualizaçõe...</td>\n",
              "      <td>3 semanas diminuiriam metade visualizações sto...</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15467</th>\n",
              "      <td>1</td>\n",
              "      <td>Olá Boa tarde. \\n\\nÉ um ótimo aplicativo, mas ...</td>\n",
              "      <td>[olá, boa, tarde, ótimo, aplicativo, aguento, ...</td>\n",
              "      <td>olá boa tarde ótimo aplicativo aguento ver pro...</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15881</th>\n",
              "      <td>1</td>\n",
              "      <td>Eu salvo os efeitos que eu gosto mais às vezes...</td>\n",
              "      <td>[salvo, efeitos, gosto, vezes, somem, vou, pes...</td>\n",
              "      <td>salvo efeitos gosto vezes somem vou pesquisar ...</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2716</th>\n",
              "      <td>5</td>\n",
              "      <td>Acho de suma importância o Instagram nos ofere...</td>\n",
              "      <td>[acho, suma, importância, instagram, oferecer,...</td>\n",
              "      <td>acho suma importância instagram oferecer nova ...</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4448</th>\n",
              "      <td>5</td>\n",
              "      <td>A única coisa que eu me incomodo com o aplicat...</td>\n",
              "      <td>[única, coisa, incomodo, aplicativoe, sobre, g...</td>\n",
              "      <td>única coisa incomodo aplicativoe sobre gravaçã...</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4793</th>\n",
              "      <td>5</td>\n",
              "      <td>Ótimo app, permite a mudança da vida de uma pe...</td>\n",
              "      <td>[ótimo, app, permite, mudança, vida, pessoa, d...</td>\n",
              "      <td>ótimo app permite mudança vida pessoa dedica e...</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8259</th>\n",
              "      <td>5</td>\n",
              "      <td>Excelente ferramenta que vem conquistando cada...</td>\n",
              "      <td>[excelente, ferramenta, vem, conquistando, cad...</td>\n",
              "      <td>excelente ferramenta vem conquistando cada vez...</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8326</th>\n",
              "      <td>5</td>\n",
              "      <td>Uma das melhores redes sociais já criadas. Int...</td>\n",
              "      <td>[melhores, redes, sociais, criadas, interface,...</td>\n",
              "      <td>melhores redes sociais criadas interface limpa...</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8353</th>\n",
              "      <td>5</td>\n",
              "      <td>Em CINCO dias o meu perfil bateu 500 seguidore...</td>\n",
              "      <td>[cinco, dias, perfil, bateu, 500, seguidores, ...</td>\n",
              "      <td>cinco dias perfil bateu 500 seguidores efeitos...</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11781</th>\n",
              "      <td>5</td>\n",
              "      <td>O meu insta estava de boa até o mês de Abril, ...</td>\n",
              "      <td>[insta, boa, mês, abril, atualizar, tendo, not...</td>\n",
              "      <td>insta boa mês abril atualizar tendo notificaçõ...</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12732</th>\n",
              "      <td>5</td>\n",
              "      <td>Vc luta para ter um bom perfil e depois seu am...</td>\n",
              "      <td>[vc, luta, ter, bom, perfil, amigo, trola, vc,...</td>\n",
              "      <td>vc luta ter bom perfil amigo trola vc fica ben...</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13866</th>\n",
              "      <td>5</td>\n",
              "      <td>Seria bom se quando a gente enviasse uma publi...</td>\n",
              "      <td>[bom, gente, enviasse, publicação, página, pri...</td>\n",
              "      <td>bom gente enviasse publicação página privada p...</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15588</th>\n",
              "      <td>5</td>\n",
              "      <td>Acho excelente o app mas poderiam fazer uma at...</td>\n",
              "      <td>[acho, excelente, app, poderiam, fazer, atuali...</td>\n",
              "      <td>acho excelente app poderiam fazer atualização ...</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18603</th>\n",
              "      <td>5</td>\n",
              "      <td>esse App é excelente falo com meus amigos é ex...</td>\n",
              "      <td>[app, excelente, falo, amigos, excelente, perf...</td>\n",
              "      <td>app excelente falo amigos excelente perfeito a...</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       rating  ... feeling\n",
              "1345        1  ...       4\n",
              "2664        1  ...       4\n",
              "3898        1  ...       4\n",
              "4462        1  ...       4\n",
              "5414        1  ...       4\n",
              "8261        1  ...       4\n",
              "12226       1  ...       4\n",
              "13873       1  ...       4\n",
              "15467       1  ...       4\n",
              "15881       1  ...       4\n",
              "2716        5  ...       4\n",
              "4448        5  ...       4\n",
              "4793        5  ...       4\n",
              "8259        5  ...       4\n",
              "8326        5  ...       4\n",
              "8353        5  ...       4\n",
              "11781       5  ...       4\n",
              "12732       5  ...       4\n",
              "13866       5  ...       4\n",
              "15588       5  ...       4\n",
              "18603       5  ...       4\n",
              "\n",
              "[21 rows x 5 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 52
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WDOhLooioE1W",
        "outputId": "b2bd4234-4e07-4237-d132-c18387cfb71d",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "classifier = KNeighborsClassifier(n_neighbors=5)\n",
        "classifier.fit(X_train, y_train)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n",
              "                     metric_params=None, n_jobs=None, n_neighbors=5, p=2,\n",
              "                     weights='uniform')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Je8p_hLsoXSv"
      },
      "source": [
        "y_pred = classifier.predict(X_test)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OM4L8S4pobeD",
        "outputId": "ac3f227d-4862-4176-9b8c-0c1e3a725828",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "print(confusion_matrix(y_test, y_pred))\n",
        "print(classification_report(y_test, y_pred))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[1800 1163]\n",
            " [ 737 1303]]\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           1       0.71      0.61      0.65      2963\n",
            "           5       0.53      0.64      0.58      2040\n",
            "\n",
            "    accuracy                           0.62      5003\n",
            "   macro avg       0.62      0.62      0.62      5003\n",
            "weighted avg       0.64      0.62      0.62      5003\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}
